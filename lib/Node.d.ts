import { Session } from '.';
export declare const IPFS_BROWSER_CONFIG: any;
export declare const SYNC_INTERVAL = 1000;
export declare class Node {
    private _cid;
    private _ipfs;
    private _ctl;
    private _isBrowser;
    private _isOperator;
    private _mesh;
    private _listen;
    private _onEvent;
    private _onEventResult;
    private _session;
    private _syncTimer;
    private _send;
    private sync;
    private _swarm;
    private _connected;
    private _sendQueue;
    constructor(session: Session);
    get connected(): boolean;
    get sendQueue(): any;
    get syncTimer(): any;
    get session(): Session;
    get mesh(): any;
    get ipfs(): any;
    get ctl(): any;
    get cid(): string;
    get isBrowser(): boolean;
    get isOperator(): boolean;
    get send(): any;
    get isConnected(): boolean;
    get swarm(): any;
    stopSyncTimer(): void;
    _sync(): Promise<void>;
    flushSendQueue(): Promise<void>;
    addToSendQueue(e: any): Promise<void>;
    startSyncTimer(): void;
    ls(location?: string): Promise<any>;
    open(id: string): Promise<any>;
    pull(id: string, cid: string): Promise<any>;
    push(id: string, data: any): Promise<{
        cid: any;
        size: any;
        path: string;
        id: string;
    } | undefined>;
    onEvent(type: string, event: any): Promise<void>;
    onEventResult(type: string, event: any): Promise<void>;
    _sendRaw(type: string, event: any): Promise<void>;
    listen(type: string, result?: boolean): Promise<void>;
    resolveMesh(): Promise<any>;
    startIPFS(ipfs?: any): Promise<void>;
    start(ipfs?: any): Promise<void>;
}
